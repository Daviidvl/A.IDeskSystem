import OpenAI from "openai";

const client = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true,
});

// Mant√©m contador por ticket (persistente)
const attemptCount: Record<string, number> = JSON.parse(
  localStorage.getItem("aiAttempts") || "{}"
);

// Adiciona controle de resolu√ß√£o autom√°tica
const resolvedTickets: Record<string, boolean> = JSON.parse(
  localStorage.getItem("resolvedTickets") || "{}"
);

const saveData = () => {
  localStorage.setItem("aiAttempts", JSON.stringify(attemptCount));
  localStorage.setItem("resolvedTickets", JSON.stringify(resolvedTickets));
};

// Fun√ß√£o para detectar inten√ß√µes do usu√°rio
function detectUserIntent(userMessage: string): {
  wantsHuman: boolean;
  problemSolved: boolean;
  isGreeting: boolean;
} {
  const message = userMessage.toLowerCase().trim();
  
  // Palavras-chave para querer falar com humano
  const humanKeywords = [
    'quero falar com humano', 'atendente humano', 't√©cnico humano', 'pessoa real',
    'falar com pessoa', 'atendimento humano', 'operador humano', 'assistente humano',
    'n√£o resolveu', 'n√£o funcionou', 'n√£o conseguiu', 'prefiro humano',
    'chamar t√©cnico', 'encaminhar t√©cnico', 'falhar com supervisor', 'humano',
    'atendente', 'operador', 'pessoa', 't√©cnico', 'especialista'
  ];

  // Palavras-chave para problema resolvido
  const solvedKeywords = [
    'resolvido', 'funcionou', 'deu certo', 'consegui', 'obrigado', 'ajudou',
    'problema solucionado', 'tudo certo', 'ok obrigado', 'valeu', 'obrigado ajuda',
    'resolveu obrigado', 'perfeito', 'excelente', 'obrigado pela ajuda', 'deu certo',
    'funcionou aqui', 'consegui resolver', 'pronto', 'solucionado'
  ];

  // Sauda√ß√µes
  const greetingKeywords = [
    'oi', 'ol√°', 'bom dia', 'boa tarde', 'boa noite', 'hello', 'hey'
  ];

  const wantsHuman = humanKeywords.some(keyword => message.includes(keyword));
  const problemSolved = solvedKeywords.some(keyword => message.includes(keyword));
  const isGreeting = greetingKeywords.some(keyword => 
    message === keyword || message.startsWith(keyword + ' ') || message.endsWith(' ' + keyword)
  );

  return { wantsHuman, problemSolved, isGreeting };
}

export async function getAIResponse(ticketId: string, userMessage: string): Promise<{
  text: string;
  requiresHuman: boolean;
  autoResolved: boolean;
}> {
  // Verifica se ticket j√° foi resolvido automaticamente
  if (resolvedTickets[ticketId]) {
    return {
      text: "Este caso j√° foi resolvido anteriormente. Se precisar de mais ajuda, abra um novo ticket! üòä",
      requiresHuman: false,
      autoResolved: true
    };
  }

  // Detecta inten√ß√µes do usu√°rio
  const intent = detectUserIntent(userMessage);

  // üîπ SE USU√ÅRIO PEDIR POR HUMANO ‚Üí ENCAMINHA IMEDIATAMENTE
  if (intent.wantsHuman) {
    attemptCount[ticketId] = 3; // For√ßa encaminhamento
    saveData();
    
    return {
      text: `Entendi que prefere falar com nosso t√©cnico humano. Estou encaminhando seu caso imediatamente! üßë‚Äçüîß\n\nüîπ N√∫mero do protocolo: #${ticketId.slice(0, 8)}`,
      requiresHuman: true,
      autoResolved: false
    };
  }

  // üîπ SE USU√ÅRIO CONFIRMAR QUE PROBLEMA FOI RESOLVIDO ‚Üí ENCERRA AUTOMATICAMENTE
  if (intent.problemSolved) {
    resolvedTickets[ticketId] = true;
    saveData();
    
    return {
      text: `Que √≥timo! Fico feliz em saber que consegui ajudar! üòä\n\nSe tiver mais alguma d√∫vida, estarei aqui para ajudar.\n\n**Por favor, avalie nosso atendimento abaixo:** ‚≠ê`,
      requiresHuman: false,
      autoResolved: true
    };
  }

  // Se n√£o existir contador, cria
  if (!attemptCount[ticketId]) attemptCount[ticketId] = 0;

  // Se j√° atingiu o limite ‚Üí IA n√£o responde mais
  if (attemptCount[ticketId] >= 3) {
    return {
      text: `N√£o consegui resolver por aqui. Estou encaminhando o caso para um t√©cnico humano. üßë‚Äçüîß\n\nüîπ N√∫mero do protocolo: #${ticketId.slice(0, 8)}`,
      requiresHuman: true,
      autoResolved: false
    };
  }

  try {
    // Incrementa e salva tentativa
    attemptCount[ticketId]++;
    saveData();

    console.log(`ü§ñ Tentativa da IA (${ticketId}): ${attemptCount[ticketId]}`);

    // Prompt mais inteligente para a IA
    const systemPrompt = `Voc√™ √© o assistente t√©cnico virtual da plataforma A.I Desk. Siga estas regras:

1. Tente resolver o problema do usu√°rio de forma CLARA e OBJETIVA
2. Se o usu√°rio pedir explicitamente por humano/t√©cnico, informe que ir√° encaminhar
3. Se o usu√°rio confirmar que problema foi resolvido, agrade√ßa e encerre
4. Voc√™ tem at√© 3 tentativas para resolver
5. Ap√≥s 3 tentativas sem sucesso, encaminhe para t√©cnico humano
6. Mantenha respostas curtas e diretas ao ponto
7. Foque em solu√ß√µes pr√°ticas e passo a passo

Formato de resposta:
- Problema t√©cnico: Ofere√ßa solu√ß√£o passo a passo
- Pedido por humano: Encaminhe imediatamente  
- Problema resolvido: Agrade√ßa e encerre
- Limite atingido: Encaminhe para t√©cnico`;

    // Gera resposta da IA
    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: userMessage,
        },
      ],
      max_tokens: 300,
      temperature: 0.7,
    });

    const aiText =
      completion.choices[0]?.message?.content?.trim() ||
      "Desculpe, n√£o consegui gerar uma resposta agora.";

    // Verifica se atingiu o limite ap√≥s a resposta
    const requiresHuman = attemptCount[ticketId] >= 3;

    if (requiresHuman) {
      return {
        text: `N√£o consegui resolver por aqui. Estou encaminhando o caso para um t√©cnico humano. üßë‚Äçüîß\n\nüîπ N√∫mero do protocolo: #${ticketId.slice(0, 8)}`,
        requiresHuman: true,
        autoResolved: false
      };
    }

    return { 
      text: aiText, 
      requiresHuman: false,
      autoResolved: false 
    };
  } catch (error) {
    console.error("Erro na IA:", error);
    return {
      text: `Ocorreu um erro ao tentar processar sua solicita√ß√£o. Encaminhando para um t√©cnico humano. üßë‚Äçüîß\n\nüîπ N√∫mero do protocolo: #${ticketId.slice(0, 8)}`,
      requiresHuman: true,
      autoResolved: false
    };
  }
}

// Fun√ß√£o para verificar se ticket foi resolvido automaticamente
export function isTicketAutoResolved(ticketId: string): boolean {
  return resolvedTickets[ticketId] || false;
}

// Fun√ß√£o para resetar um ticket (para testes)
export function resetTicket(ticketId: string) {
  delete attemptCount[ticketId];
  delete resolvedTickets[ticketId];
  saveData();
}